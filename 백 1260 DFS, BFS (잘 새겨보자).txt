import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class just {
//	DFS를 구현해 보겠습니다.
	public static void main(String[] args) throws IOException {
	BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
	StringTokenizer st= new StringTokenizer(br.readLine());
	int n= Integer.parseInt(st.nextToken());
	int m= Integer.parseInt(st.nextToken());
	int start= Integer.parseInt(st.nextToken());
	boolean [] visited = new boolean[n+1];
	boolean [] visited2= new boolean[n+1];
	
	int [][] arr = new int [n+1][n+1];
	
	for(int i=0; i<m; i++) {
		st=new StringTokenizer(br.readLine());
		int a= Integer.parseInt(st.nextToken());
		int b= Integer.parseInt(st.nextToken());
		arr[a][b]=1;
		arr[b][a]=1;
	}
	dfs(visited, arr, start);
	System.out.println();
	bfs(visited2, arr, start);
	}
	public static void dfs(boolean[] visited, int [][] arr, int a) {
		System.out.print(a+" ");
		visited[a]=true;
		for(int i=1; i<visited.length; i++) {
			if(arr[a][i]==1&&!visited[i]) {
				dfs(visited,arr,i);
			}
		}
	}
	public static void bfs(boolean [] visited, int [][]arr, int a) {
		Queue<Integer> q = new LinkedList<>();
		q.add(a);
		visited[a]=true;
		
		while(!q.isEmpty()) {
			int v= q.poll();
			System.out.print(v+" ");
			for(int i=1; i<visited.length; i++) {
				if(arr[v][i]==1&&!visited[i]) {
					q.add(i);
					visited[i]=true;
				}
			}
		}
	}
}
