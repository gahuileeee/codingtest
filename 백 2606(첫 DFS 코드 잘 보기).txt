import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class just {
//	DFS를 구현해 보겠습니다.
	public static void main(String[] args) throws IOException {
	BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
	int n= Integer.parseInt(br.readLine());
	int m= Integer.parseInt(br.readLine());
	int [][] graph = new int[n+1][n+1];
	
	for(int i=0; i<m; i++) {
		StringTokenizer st= new StringTokenizer(br.readLine());
		int nn=Integer.parseInt(st.nextToken());
		int mm= Integer.parseInt(st.nextToken());
		graph[nn][mm]=1;
		graph[mm][nn]=1;
	}
	boolean [] visited = new boolean[n+1];
	dfs(graph, visited, 1);
	int p=0;
	for( int i=2; i<=n; i++) {
		if(visited[i]==true) {
			p++;
		}
	}
	System.out.println(p);
	}
	public static void dfs(int [][] graph, boolean [] visited, int k) {
		visited[k]= true;
		for(int i=1; i<visited.length; i++) {
			if(graph[k][i]==1 && !visited[i]) {
				dfs(graph, visited, i);
			}
		}
	}
}