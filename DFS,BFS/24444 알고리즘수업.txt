p
/*
 * 문제: 백준 24444 알고리즘 수업 - 너비 우선 탐색1
 * 입력:  첫째 줄에 정점의 수 N (5 ≤ N ≤ 100,000), 
 * 간선의 수 M (1 ≤ M ≤ 200,000), 시작 정점 R (1 ≤ R ≤ N)이 주어진다.
 * 
 * 출력:  첫째 줄부터 N개의 줄에 정수를 한 개씩 출력한다. i번째 줄에는 정점 i의 방문 순서를 출력한다. 
 * 시작 정점의 방문 순서는 1이다. 시작 정점에서 방문할 수 없는 경우 0을 출력한다.
 */
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Collections;
import java.util.Deque;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;

public class Main2 {
	public static int N;
	public static int M;
	public static int start;
	public static List<Integer> [] list;
	public static boolean [] v;
	public static int count;
	public static Deque<Integer> q = new ArrayDeque<>();
	public static StringBuffer sb= new StringBuffer();
	public static int [] arr;
	
	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st= new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		start = Integer.parseInt(st.nextToken());
		
		list = new LinkedList[N+1];
		for(int i=1; i<=N; i++) {
			list[i]= new LinkedList<>();
		}
		for(int i=0; i<M; i++) {
			st = new StringTokenizer(br.readLine());
			int a=Integer.parseInt(st.nextToken());
			int b=Integer.parseInt(st.nextToken());
			list[a].add(b);
			list[b].add(a);
		}
	
		for(int i=1; i<=N; i++) {
			Collections.sort(list[i]);		
		}

		v= new boolean [N+1];
		arr = new int [N+1];
		count = 1;
		bfs();
		for(int i=1; i<=N; i++) {
			sb.append(arr[i]+"\n");
		}
		System.out.println(sb.toString());
	}
	

	
	public static void bfs() {
		v[start]=true;
		arr[start] = count++;
		q.add(start);
		while(!q.isEmpty()) {
			int a= q.pollFirst();
			for(int i : list[a]) {
				if(!v[i]) {
					v[i]=true;
					arr[i] = count++;
					q.add(i);
				}
			}
		}
	}
}